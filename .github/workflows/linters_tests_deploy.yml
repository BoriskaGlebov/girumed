name: Linters Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
jobs:
  mypy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install \
               mypy \
               types-setuptools \
               types-requests \
               types-tabulate \
               types-freezegun \
               types-python-dateutil \
               types-pyyaml
      - name: Run MyPy type checking
        run: mypy --config-file=pyproject.toml .

  black:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Black formatting check
        run: black --diff --check .

  isort:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Isort check
        run: isort --check-only .

  flake8:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Flake8 linting
        run: flake8 .

  tests:
    runs-on: ubuntu-latest
    needs: [ mypy, black, isort, flake8 ]  # Зависит от всех линтеров
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Укажите версию Python

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: .env file create
        run: |
          echo "Creating .env file"
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_TEST=${{ secrets.DB_TEST }}" >> .env
          echo "PYTHONPATH=${{ secrets.PYTHONPATH }}" >> .env
          echo "LOGGER_LEVEL_STDOUT=${{secrets.LOGGER_LEVEL_STDOUT}}">>.env
          echo "LOGGER_LEVEL_FILE=${{secrets.LOGGER_LEVEL_FILE}}">>.env
          echo "LOGGER_ERROR_FILE=${{secrets.LOGGER_ERROR_FILE}}">>.env

      - name: .env file check
        run: |
          echo "Contents of .env file:"
          cat .env

      - name: Build and run Docker Compose
        run: |
          make up

      - name: Run Tests with retries
        run: |
          n=0
          until [ $n -ge 3 ]
          do
            make check && break
            n=$((n+1))
            echo "Тесты не прошли, попытка $n из 3"
            sleep 5
          done

          if [ $n -eq 3 ]; then
            echo "Тесты не прошли после 3 попыток"
            exit 1
          fi
