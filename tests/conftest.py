import os
from datetime import datetime, timedelta
from typing import Any, AsyncGenerator, Generator

import pytest
import pytest_asyncio
from httpx import ASGITransport, AsyncClient
from sqlalchemy import text
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from app.appointments.dao import AppointmentDAO, DoctorDAO, PatientDAO
from app.config import get_settings, logger
from app.data_generate import generate_appointments, generate_doctors, generate_patients
from app.database import Base, async_test_session, test_engine
from app.dependencies import get_session
from app.main import app
from migrations_script import run_alembic_command


async def get_session_override() -> AsyncGenerator[AsyncSession, None]:
    """
    –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å FastAPI `get_session` –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã.

    :yield: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    async with async_test_session() as session:
        yield session


# –ü–æ–¥–º–µ–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
app.dependency_overrides[get_session] = get_session_override


@pytest_asyncio.fixture(scope="session", autouse=True)
async def clean_database() -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤."""
    cwd = os.path.split(os.getcwd())[1]

    if cwd == "tests":
        run_alembic_command("cd ..; alembic -x db=test upgrade head; alembic -x db=test current")
    elif cwd == "girumed":
        run_alembic_command("ENV=local alembic -x db=test upgrade head; alembic -x db=test current")

    async with async_test_session() as session:
        await session.execute(text("TRUNCATE TABLE appointments RESTART IDENTITY CASCADE;"))
        await session.execute(text("TRUNCATE TABLE doctors RESTART IDENTITY CASCADE;"))
        await session.execute(text("TRUNCATE TABLE patients RESTART IDENTITY CASCADE;"))
        await session.commit()

    logger.info("üßπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.")


@pytest_asyncio.fixture(scope="session", autouse=True)
async def test_db(async_client: AsyncClient) -> AsyncGenerator[AsyncSession, None]:
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.

    :param async_client: HTTP-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
    :yield: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    async with test_engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    async with async_test_session() as session:
        doctors = [await DoctorDAO.add(session, **doc.to_dict()) for doc in generate_doctors(5)]
        patients = [await PatientDAO.add(session, **pat.to_dict()) for pat in generate_patients(5)]

        appointments = generate_appointments(patients=patients, doctors=doctors, num_appointments=20)

        for appointment in appointments:
            try:
                await AppointmentDAO.add(session, **appointment.to_dict())
            except ValueError as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏—ë–º: {e}")
            except SQLAlchemyError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏—ë–º–∞: {e}")

        yield session


@pytest_asyncio.fixture(scope="session")
async def async_client() -> AsyncGenerator[AsyncClient, None]:
    """
    –°–æ–∑–¥–∞—ë—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤ FastAPI.

    :yield: AsyncClient —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.
    """
    async with AsyncClient(transport=ASGITransport(app=app), base_url="http://test") as client:
        yield client


@pytest.fixture(scope="session")
def config() -> Generator[Any, None, None]:
    """
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    :yield: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    settings = get_settings()
    yield settings


@pytest_asyncio.fixture(scope="session")
async def test_doctor() -> AsyncGenerator[Any, None]:
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞.

    :yield: –û–±—ä–µ–∫—Ç –¥–æ–∫—Ç–æ—Ä–∞.
    """
    async with async_test_session() as session:
        doctor = await DoctorDAO.add(
            async_session=session,
            name="Dr. House",
            specialization="–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥",
            experience_years=10,
        )
        yield doctor


@pytest_asyncio.fixture(scope="session")
async def test_patient1() -> AsyncGenerator[Any, None]:
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞.

    :yield: –û–±—ä–µ–∫—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞.
    """
    async with async_test_session() as session:
        patient = await PatientDAO.add(
            async_session=session,
            name="–ë–æ–ª—å–Ω–æ–π1",
            email="test@mail.ru",
            phone="89852000338",
        )
        yield patient


@pytest_asyncio.fixture(scope="session")
async def test_patient2() -> AsyncGenerator[Any, None]:
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞.

    :yield: –û–±—ä–µ–∫—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞.
    """
    async with async_test_session() as session:
        patient = await PatientDAO.add(
            async_session=session,
            name="–ë–æ–ª—å–Ω–æ–π2",
            email="test2@mail.ru",
            phone="89852000339",
        )
        yield patient


@pytest_asyncio.fixture(scope="session")
async def test_appointment(
    test_doctor: Any,
    test_patient1: Any,
) -> AsyncGenerator[Any, None]:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏—ë–º –º–µ–∂–¥—É —Ç–µ—Å—Ç–æ–≤—ã–º –¥–æ–∫—Ç–æ—Ä–æ–º –∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º 1.

    :yield: –û–±—ä–µ–∫—Ç –ø—Ä–∏—ë–º–∞.
    """
    async with async_test_session() as session:
        start_time = datetime.now().replace(microsecond=0) + timedelta(hours=1)
        appointment = await AppointmentDAO.add(
            async_session=session,
            doctor_id=test_doctor.id,
            patient_id=test_patient1.id,
            start_time=start_time,
        )
        yield appointment


@pytest_asyncio.fixture(scope="session")
async def test_appointment2(
    test_doctor: Any,
    test_patient2: Any,
) -> AsyncGenerator[Any, None]:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏—ë–º –º–µ–∂–¥—É —Ç–µ—Å—Ç–æ–≤—ã–º –¥–æ–∫—Ç–æ—Ä–æ–º –∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º 2.

    :yield: –û–±—ä–µ–∫—Ç –ø—Ä–∏—ë–º–∞.
    """
    async with async_test_session() as session:
        start_time = datetime.now().replace(microsecond=0) + timedelta(hours=1)
        appointment = await AppointmentDAO.add(
            async_session=session,
            doctor_id=test_doctor.id,
            patient_id=test_patient2.id,
            start_time=start_time,
        )
        yield appointment
